WEBKIT_OPTION_BEGIN()
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_3D_TRANSFORMS PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_ACCELERATED_2D_CANVAS PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_ACCELERATED_OVERFLOW_SCROLLING PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_ALLINONE_BUILD PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_API_TESTS PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_ATTACHMENT_ELEMENT PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CHANNEL_MESSAGING PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CSS3_TEXT PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CSS_BOX_DECORATION_BREAK PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CSS_COMPOSITING PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CSS_DEVICE_ADAPTATION PRIVATE OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CSS_REGIONS PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CSS_SELECTORS_LEVEL4 PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CURSOR_VISIBILITY PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CUSTOM_SCHEME_HANDLER PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_DATALIST_ELEMENT PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_DEVICE_ORIENTATION PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_DRAG_SUPPORT PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_FULLSCREEN_API PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_GAMEPAD PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_GEOLOCATION PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_ICONDATABASE PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INDEXED_DATABASE PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INPUT_TYPE_COLOR PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INPUT_TYPE_DATE PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INPUT_TYPE_DATETIMELOCAL PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INPUT_TYPE_DATETIME_INCOMPLETE PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INPUT_TYPE_MONTH PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INPUT_TYPE_TIME PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INPUT_TYPE_WEEK PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INTL PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_LEGACY_CSS_VENDOR_PREFIXES PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_LEGACY_VENDOR_PREFIXES PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_LINK_PREFETCH PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MATHML PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MEDIA_CONTROLS_SCRIPT PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MEDIA_SOURCE PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MEDIA_STATISTICS PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_METER_ELEMENT PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MHTML PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MOUSE_CURSOR_SCALE PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_NAVIGATOR_CONTENT_UTILS PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_NETSCAPE_PLUGIN_API PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_NOTIFICATIONS PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_QUOTA PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_RESOLUTION_MEDIA_QUERY PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_SAMPLING_PROFILER PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_SVG_FONTS PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_TEXT_AUTOSIZING PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_TOUCH_EVENTS PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_VIDEO PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_VIDEO_TRACK PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEBGL PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEBVTT_REGIONS PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEB_AUDIO PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_XSLT PUBLIC ON)

if (WIN32)
    WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_ALLINONE_BUILD PUBLIC ON)
    # FIXME: Port bmalloc to Windows. https://bugs.webkit.org/show_bug.cgi?id=143310
    WEBKIT_OPTION_DEFAULT_PORT_VALUE(USE_SYSTEM_MALLOC PRIVATE ON)
endif ()

WEBKIT_OPTION_END()

SET_AND_EXPOSE_TO_BUILD(USE_CAIRO TRUE)
SET_AND_EXPOSE_TO_BUILD(USE_CURL TRUE)

SET_AND_EXPOSE_TO_BUILD(USE_EGL TRUE)
SET_AND_EXPOSE_TO_BUILD(USE_OPENGL_ES_2 TRUE)
SET_AND_EXPOSE_TO_BUILD(USE_PTHREADS TRUE)

SET_AND_EXPOSE_TO_BUILD(ENABLE_GRAPHICS_CONTEXT_3D TRUE)
SET_AND_EXPOSE_TO_BUILD(USE_COORDINATED_GRAPHICS TRUE)
SET_AND_EXPOSE_TO_BUILD(USE_COORDINATED_GRAPHICS_THREADED TRUE)
SET_AND_EXPOSE_TO_BUILD(USE_COORDINATED_GRAPHICS_MULTIPROCESS TRUE)
SET_AND_EXPOSE_TO_BUILD(USE_GRAPHICS_SURFACE FALSE)
SET_AND_EXPOSE_TO_BUILD(USE_TEXTURE_MAPPER TRUE)
SET_AND_EXPOSE_TO_BUILD(USE_TEXTURE_MAPPER_GL TRUE)
SET_AND_EXPOSE_TO_BUILD(USE_UNIX_DOMAIN_SOCKETS TRUE)

if (NOT WEBKIT_LIBRARIES_DIR)
    if (DEFINED ENV{WEBKIT_LIBRARIES})
        set(WEBKIT_LIBRARIES_DIR "$ENV{WEBKIT_LIBRARIES}")
    elseif (WIN32)
        set(WEBKIT_LIBRARIES_DIR "${CMAKE_SOURCE_DIR}/WebKitLibraries/win")
    elseif (ANDROID)
        set(WEBKIT_LIBRARIES_DIR "${CMAKE_SOURCE_DIR}/WebKitLibraries/android")
    endif ()
endif ()

if (WIN32)
    if (${WTF_CPU_X86})
        set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB32_PATHS ON)
        set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS OFF)
        set(WEBKIT_LIBRARIES_LINK_DIR "${WEBKIT_LIBRARIES_DIR}/lib32")
        # FIXME: Remove ${WEBKIT_LIBRARIES_LINK_DIR} when find_library is used for everything
        link_directories("${CMAKE_BINARY_DIR}/lib32" "${WEBKIT_LIBRARIES_LINK_DIR}")
        set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib32)
        set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib32)
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin32)
    else ()
        set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB32_PATHS OFF)
        set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS ON)
        set(WEBKIT_LIBRARIES_LINK_DIR "${WEBKIT_LIBRARIES_DIR}/lib64")
        # FIXME: Remove ${WEBKIT_LIBRARIES_LINK_DIR} when find_library is used for everything
        link_directories("${CMAKE_BINARY_DIR}/lib64" "${WEBKIT_LIBRARIES_LINK_DIR}")
        set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib64)
        set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib64)
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin64)
    endif ()
endif ()    

set(CMAKE_PREFIX_PATH ${WEBKIT_LIBRARIES_DIR})

set(WEBKIT_LIBRARIES_INCLUDE_DIR "${WEBKIT_LIBRARIES_DIR}/include")

include_directories(
    "${CMAKE_BINARY_DIR}/DerivedSources/ForwardingHeaders"
    "${CMAKE_BINARY_DIR}/DerivedSources"
    "${WEBKIT_LIBRARIES_INCLUDE_DIR}"
)

add_definitions(-DBUILDING_ANDROID__=1)
add_definitions(-DJNI_STATIC)

SET_AND_EXPOSE_TO_BUILD(WTF_PLATFORM_ANDROID TRUE)

set(CURL_LIBRARIES curl ssl crypto)

if (ANDROID)
    add_definitions(-D__NDK_FPABI__=)

    include(OptionsNDK)

    set(WEBKIT_SYSTEM_LIBRARIES EGL GLESv2)
    set(ANDROID_LIBRARIES androidjni++)
    set(ZLIB_LIBRARIES z)
    set(ANGLE_LIBRARIES ANGLESupport)

    set(JavaScriptCore_LIBRARY_TYPE STATIC)

    include_directories("${WEBKIT_LIBRARIES_INCLUDE_DIR}/cairo")
    set(CAIRO_LIBRARIES cairo fontconfig freetype2 harfbuzz)
    set(ICU_LIBRARIES icuin icuuc icudt)

    SET_AND_EXPOSE_TO_BUILD(USE_FREETYPE TRUE)
    SET_AND_EXPOSE_TO_BUILD(USE_HARFBUZZ TRUE)
elseif (WIN32)
    add_definitions(-DWEBKIT_EXPORTS=1 -DNOMINMAX -DUNICODE -D_UNICODE -D_WINDOWS -DWINVER=0x601 -D_WINSOCKAPI_)

    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")

    include(OptionsMSVC)

    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /NODEFAULTLIB")
    set(WEBKIT_SYSTEM_LIBRARIES concrt libcmt libcpmt msvcrt msvcprt OLDNAMES Version vcruntime ucrt winmm shlwapi usp10)
    set(ANDROID_LIBRARIES android++ androidjni++ ndk)
    set(ZLIB_LIBRARIES z)
    set(ANGLE_LIBRARIES libANGLE${DEBUG_SUFFIX} libEGL${DEBUG_SUFFIX} libGLESv2${DEBUG_SUFFIX})

    set(JavaScriptCore_LIBRARY_TYPE SHARED)
    set(WTF_LIBRARY_TYPE SHARED)

    find_package(Cairo 1.14 REQUIRED)
    find_package(ICU REQUIRED)

    SET_AND_EXPOSE_TO_BUILD(USE_EXPORT_MACROS TRUE)
    SET_AND_EXPOSE_TO_BUILD(USE_PTHREADS FALSE)
endif ()

SET_AND_EXPOSE_TO_BUILD(HAVE_STRUCT_TIMESPEC TRUE)
SET_AND_EXPOSE_TO_BUILD(CURL_STATICLIB TRUE)
SET_AND_EXPOSE_TO_BUILD(U_DISABLE_RENAMING TRUE)

set(ENABLE_API_TESTS OFF)
set(ENABLE_TOOLS ON)
set(ENABLE_WEBCORE ON)
set(ENABLE_WEBKIT_LEGACY OFF)
set(ENABLE_WEBKIT ON)

if (NOT ANDROID)
    include_directories(
        "${WEBKIT_LIBRARIES_INCLUDE_DIR}/android++"
        "${WEBKIT_LIBRARIES_INCLUDE_DIR}/android++/android" 
        "${WEBKIT_LIBRARIES_INCLUDE_DIR}/ndk"
    )
endif()
include_directories(
    "${WEBKIT_LIBRARIES_INCLUDE_DIR}/androidjni++"
    "${WEBKIT_LIBRARIES_INCLUDE_DIR}/androidjni++/android"
)

set(PORT Android)

macro(WEBKIT_CREATE_FORWARDING_HEADERS _framework)
    if (WIN32)
        file(MAKE_DIRECTORY ${DERIVED_SOURCES_DIR}/ForwardingHeaders/${_framework})
        foreach (_directory ${${_framework}_FORWARDING_HEADERS_DIRECTORIES})
            file(GLOB _headers RELATIVE ${CMAKE_SOURCE_DIR}/Source ${CMAKE_SOURCE_DIR}/Source/${_framework}/${_directory}/*.h)
            foreach (_header ${_headers})
                get_filename_component(_file ${_header} NAME)
                if (NOT EXISTS ${DERIVED_SOURCES_DIR}/ForwardingHeaders/${_framework}/${_file})
                    file(WRITE ${DERIVED_SOURCES_DIR}/ForwardingHeaders/${_framework}/${_file}
                        "// AUTO-GENERATED FILE. DO NOT MODIFY.\n"
                        "#include \"${_header}\"\n"
                    )
                endif ()
            endforeach ()
        endforeach ()
    else ()
        _WEBKIT_CREATE_FORWARDING_HEADERS(${_framework} ${ARGN})
    endif ()
endmacro()

macro(FIND_SOURCE_TARGET _path)
    string(REGEX MATCH "Source/([a-zA-Z0-9]+)" _var "${_path}")
    set(_FOUND_SOURCE_TARGET ${CMAKE_MATCH_1})
endmacro()

macro(WEBKIT_ANDROID_FRAMEWORK _framework)
    set(INTERFACE_GENERATOR ${WEBKIT_LIBRARIES_DIR}/scripts/interface-generator.py)
    set(COPY_WEBKIT_PACKAGE ${TOOLS_DIR}/android/copy-webkit-package.py)
    find_source_target(${CMAKE_CURRENT_SOURCE_DIR})
    set(_destination "${DERIVED_SOURCES_DIR}/Interfaces/${_FOUND_SOURCE_TARGET}")
    set(_input_files "${${_framework}_ANDROID_SOURCES}")

    set(GENERATOR_DEPENDENCIES
        ${INTERFACE_GENERATOR}
        ${WEBKIT_LIBRARIES_DIR}/scripts/lextab.py
        ${WEBKIT_LIBRARIES_DIR}/scripts/parsetab.py
        ${COPY_WEBKIT_PACKAGE}
    )

    foreach (_file ${_input_files})
        get_filename_component(_ext ${_file} EXT)

        if (NOT "${_ext}" STREQUAL ".aidl")
            get_filename_component(_name ${_file} NAME_WE)
            get_filename_component(_absolute ${_file} ABSOLUTE)
            get_filename_component(_path ${_absolute} DIRECTORY)
            get_filename_component(_relative ${_file} DIRECTORY)

            set(GENERATOR_OUTPUTS
                ${_destination}/${_name}NativesStub.cpp
            )
            set(FRAMEWORK_SOURCES)
            if (EXISTS ${_path}/${_name}Natives.cpp)
                list(APPEND FRAMEWORK_SOURCES
                    ${_relative}/${_name}Natives.cpp
                )
            endif()

            if (ANDROID)
                set(GENERATOR_TARGET_PLATFORM android)
            else ()
                set(GENERATOR_TARGET_PLATFORM generic)
                list(APPEND GENERATOR_OUTPUTS
                    ${_destination}/${_name}ManagedStub.cpp
                )
                if (EXISTS ${_path}/${_name}.cpp)
                    list(APPEND FRAMEWORK_SOURCES
                        ${_relative}/${_name}.cpp
                    )
                endif()
            endif ()

            add_custom_command(
                OUTPUT ${GENERATOR_OUTPUTS}
                MAIN_DEPENDENCY ${_file}
                DEPENDS ${GENERATOR_DEPENDENCIES}
                COMMAND ${PYTHON_EXECUTABLE} ${INTERFACE_GENERATOR} --java "${_absolute}" --shared "${_destination}" --${GENERATOR_TARGET_PLATFORM} "${_destination}"
                COMMAND ${PYTHON_EXECUTABLE} ${COPY_WEBKIT_PACKAGE} "${_absolute}" "${CMAKE_BINARY_DIR}/Package" "${_destination}" "${CMAKE_BINARY_DIR}/PackageHeaders"
                WORKING_DIRECTORY ${${_FOUND_SOURCE_TARGET}_DIR}
                VERBATIM)

            list(APPEND ${_framework}_SOURCES ${GENERATOR_OUTPUTS} ${FRAMEWORK_SOURCES})
        endif ()
        get_property(WEBKIT_ANDROID_FRAMEWORK_SOURCES GLOBAL PROPERTY WEBKIT_ANDROID_FRAMEWORK_SOURCES)
        set_property(GLOBAL PROPERTY WEBKIT_ANDROID_FRAMEWORK_SOURCES ${WEBKIT_ANDROID_FRAMEWORK_SOURCES} ${_absolute})
    endforeach ()
    WEBKIT_WRAP_SOURCELIST(${_input_files})
    WEBKIT_WRAP_SOURCELIST(${${_framework}_SOURCES})
endmacro()
